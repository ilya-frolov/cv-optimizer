@startuml
title CV Optimization Process Chain

participant Candidate
participant Streamlit_UI
participant Temp_Storage

box "Python FastAPI Layer" #lightblue
  participant CV_Optimizer_API
  participant Text_Extractor
  participant GPT_Optimizer
  participant OpenAI_API
end box

box ".NET Core Layer" #lightgreen
  participant Docx_Injector
  participant GPT_Parser
  participant Docx_Formatter
end box

== CV Upload & Processing Initiation ==
Candidate -> Streamlit_UI : Upload CV (.docx) + paste job description
Streamlit_UI -> CV_Optimizer_API : POST /optimize (multipart: file + job_description)

== File Processing & Text Extraction ==
CV_Optimizer_API -> Temp_Storage : Save uploaded CV to temp/uploaded_cv.docx
CV_Optimizer_API -> Text_Extractor : Extract text from .docx using python-docx
Text_Extractor -> CV_Optimizer_API : Return plain text content

== AI Optimization ==
CV_Optimizer_API -> GPT_Optimizer : Call adapt_cv(cv_text, job_description)
GPT_Optimizer -> OpenAI_API : Send structured prompt with CV + job description
note over OpenAI_API : Optimizes SUMMARY, SKILLS, EXPERIENCE sections
OpenAI_API -> GPT_Optimizer : Return optimized CV text
GPT_Optimizer -> CV_Optimizer_API : Return structured optimized content

== Data Persistence & Injection ==
CV_Optimizer_API -> Temp_Storage : Save GPT output to temp/injection.json
CV_Optimizer_API -> Docx_Injector : POST optimized text to http://docx-injector:8080/inject

== CV Document Processing ==
Docx_Injector -> Temp_Storage : Read temp/uploaded_cv.docx (original file)
Docx_Injector -> GPT_Parser : Parse GPT text into structured data
note over GPT_Parser : Extract SUMMARY, SKILLS, EXPERIENCE with role blocks
GPT_Parser -> Docx_Injector : Return parsed sections (summary, skills, roles)

Docx_Injector -> Temp_Storage : Copy uploaded_cv.docx to optimized_cv.docx
Docx_Injector -> Docx_Formatter : Inject sections into .docx preserving formatting
note over Docx_Formatter : Uses OpenXML to replace content while maintaining layout
Docx_Formatter -> Docx_Injector : Return processed .docx file

== Final Delivery ==
Docx_Injector -> Temp_Storage : Save final optimized CV to temp/optimized_cv.docx
Docx_Injector -> CV_Optimizer_API : Return optimized .docx file
CV_Optimizer_API -> Streamlit_UI : Return FileResponse with optimized CV
Streamlit_UI -> Candidate : Download optimized CV (.docx)

@enduml